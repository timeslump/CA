#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define BYTE1 0xFF
#define BYTE2 0xFF00
#define BYTE3 0xFF0000
#define BYTE4 0xFF000000
#define opcode 0xFC000000
#define rs 0x03E00000
#define rt 0x001F0000
#define rd 0x0000F800
#define shift 0x000007C0
#define func 0x3F
#define imm 0xFFFF
#define offset 0xFFFF
#define sa 0x7C0

#define d_(temp) ((temp & rd) >> 11)
#define s_(temp) ((temp & rs) >> 21)
#define t_(temp) ((temp & rt) >> 16)
#define i_(temp)  (unsigned short) (temp & imm)
#define sa_(temp) ((temp & sa) >> 6)
#define off_(temp) ((short) (temp & offset))

#define invaild_mem(data) (0x10000000 <= data) && (0x10010000 >= data) ? 0 : 1
#define invaild_inst(data) ((0x0 <= data) && (0x10000 >= data)) ? 0 : 1

void Instset();

int i = 0;
int HI = 0;
int LO = 0;
int PC = 0;
int reg[32] = {0, };
int instmem[0x10000];
int data_address;


// real memory should in 0x1000000 ~ 0x1010000
int datamem[0x10000];

int power(int a,int b){
	if(b == 0)
		return 1;
	else{
		return a * power(a, b - 1);
	}
}

/* 가장 많이 사용하는
rd , rs, rt를 표현 */ 
void find_d(unsigned int temp){
	printf("$%d",(temp & rd) >> 11);
}

void find_s(unsigned int temp){
	printf("$%d",(temp & rs) >> 21);
}

void find_t(unsigned int temp){
	printf("$%d",(temp & rt) >> 16);
}

/*
opcode가 000000일 경우 
func를 확인
*/ 
int op_code_0(int temp, int read){

	int checker = 0;
	switch((temp & func)){
		case 0x20:
			if(read) {
				printf("add $%d, $%d, $%d",d_(temp),s_(temp), t_(temp));
			}
			else {
				reg[d_(temp)] = reg[s_(temp)] + reg[t_(temp)];
			}
			break;
			
		case 0x21:
			if(read) {
				printf("addu $%d, $%d, $%d",d_(temp),s_(temp), t_(temp));
			}
			else {
				reg[d_(temp)] = reg[s_(temp)] + reg[t_(temp)];
			}
			break;
			
		case 36:
			if(read) {
				printf("and $%d, $%d, $%d",d_(temp),s_(temp), t_(temp));
			}
			else {
				reg[d_(temp)] = reg[s_(temp)] & reg[t_(temp)];
			}
			break;
			
		case 0x1A:
			if(read) {
				printf("div $%d, $%d", s_(temp), t_(temp));
			}
			else {
				HI = reg[s_(temp)] % reg[t_(temp)];
				LO = reg[s_(temp)] / reg[t_(temp)];
			}
			break;
			
		case 0x1B:
			if(read) {
				printf("divu $%d, $%d",s_(temp), t_(temp));
			}
			else {
				HI = (unsigned int) reg[s_(temp)] % reg[t_(temp)];
				LO = (unsigned int) reg[s_(temp)] / reg[t_(temp)];
			}
			break;
			
		case 9:
			if(read) {
				printf("jalr $%d, $%d",d_(temp),s_(temp));
			}
			else {
				reg[d_(temp)] = PC;
				PC = reg[s_(temp)];

				if(invaild_inst(PC)){
					printf("Memory address out of range: 0x%08x\n", PC);
					return 1;
				}
			}
			break;
			
		case 8:
			if(read) {
				printf("jr $%d", s_(temp));
			}
			else {
				PC = reg[s_(temp)];
				
				if(invaild_inst(PC)){
					printf("Memory address out of range: 0x%08x\n", PC);
					return 1;
				}
			}
			break;
			
		case 0x10:
			if(read) {
				printf("mfhi $%d",d_(temp));
			}
			else {
				reg[d_(temp)] = HI;
			}
			break;
			
		case 0x12:
			if(read) {
				printf("mflo $%d",d_(temp));
			}
			else {
				reg[d_(temp)] = LO;
			}
			break;
			
		case 0x11:
			if(read) {
				printf("mthi $%d",s_(temp));
			}
			else {
				HI = reg[s_(temp)];
			}
			break;
			
		case 0x13:
			if(read) {
				printf("mtlo $%d",s_(temp));
			}
			else {
				LO = reg[s_(temp)];
			}
			break;
			
		case 0x18:
			if(read) {
				printf("mult $%d, $%d", s_(temp), t_(temp));
			}
			else {
				long long mult = (long long) reg[s_(temp)] * (long long) reg[t_(temp)];
				HI = (mult >> 32);
				LO = mult;
			}
			break;
			
		case 0x19:
			if(read) {
				printf("multu $%d, $%d",s_(temp), t_(temp));
			}
			else {
				unsigned long long mult = (unsigned long long) (unsigned int) reg[s_(temp)] * (unsigned long long) (unsigned int) reg[t_(temp)];
				HI = (mult >> 32);
				LO = mult;
			}
			break;
			
		case 0x27:
			if(read) {
				printf("nor $%d, $%d, $%d",d_(temp),s_(temp), t_(temp));
			}
			else {
				reg[d_(temp)] = ~ (reg[s_(temp)] | reg[t_(temp)]);
			}
			break;
			
		case 0x25:
			if(read) {
				printf("or $%d, $%d, $%d",d_(temp),s_(temp), t_(temp));
			}
			else {
				reg[d_(temp)] = (int) (reg[s_(temp)] | reg[t_(temp)]);
			}
			break;
			
		case 0x0:
			if(read) {
				printf("sll $%d, $%d, %hd",d_(temp),t_(temp),sa_(temp));
			}
			else {
				reg[d_(temp)] =  (int) reg[t_(temp)] * power(2,sa_(temp));
			}
			break;
					
		case 0x04:
			if(read) {
				printf("sllv $%d, $%d, $%d",d_(temp),t_(temp),s_(temp));
			}
			else {
				reg[d_(temp)] = (int) reg[t_(temp)] << reg[s_(temp)];
			}
			break;
					
		case 0x2a:
			if(read) {
				printf("slt $%d, $%d, $%d",d_(temp),s_(temp), t_(temp));
			}
			else {
				reg[d_(temp)] = (int) (reg[s_(temp)] < reg[t_(temp)]);
			}
			break;
			
		case 0x2b:
			if(read) {
				printf("sltu $%d, $%d, $%d",d_(temp),s_(temp), t_(temp));
			}
			else {
				reg[d_(temp)] = (unsigned int) reg[s_(temp)] < reg[t_(temp)];
			}
			break;
			
		case 0x03:
			if(read) {
				printf("sra $%d, $%d, %hd", d_(temp),t_(temp), sa_(temp));
			}
			else {
				int a = sa_(temp);
				reg[d_(temp)] = reg[t_(temp)] >> (int) sa_(temp);
			}
			break;
			
		case 0x07:
			if(read) {
				printf("srav $%d, $%d, $%d",d_(temp),t_(temp),s_(temp));
			}
			else {
				reg[d_(temp)] = reg[t_(temp)]  >> reg[s_(temp)];
			}
			break;
			
		case 2:
			if(read) {
				printf("srl $%d, $%d, %hd",d_(temp),t_(temp),sa_(temp));
			}
			else {
				reg[d_(temp)] = (unsigned int) reg[t_(temp)] >> sa_(temp);
			}
			break;
			
		case 6:
			if(read) {
				printf("srlv $%d, $%d, $%d",d_(temp),t_(temp),s_(temp));
			}
			else {
				reg[d_(temp)] = (unsigned int) reg[t_(temp)] >> reg[s_(temp)];
			}
			break;
			
		case 34:
			if(read) {
				printf("sub $%d, $%d, $%d",d_(temp),s_(temp), t_(temp));
			}
			else {
				reg[d_(temp)] =  (reg[s_(temp)] - reg[t_(temp)]);
			}
			break;
			
		case 35:
			if(read) {
				printf("subu $%d, $%d, $%d",d_(temp),s_(temp), t_(temp));
			}
			else {
				reg[d_(temp)] =  (reg[s_(temp)] - reg[t_(temp)]);
			}
			break;
			
		case 12:
			if(read){
				if(rs | rd | rd == 0x0)
					printf("syscall");
			}
			else {
				if(reg[2] == 1)
					printf("%d", reg[4]);
				else if(reg[2] == 4){
					i = 0;
					while((datamem[reg[4] - 0x10000000 + i] != 0) && (!invaild_mem(reg[4] + i))){
						printf("%c", (char) datamem[reg[4] - 0x10000000 + i]);
						i++;
					}
					if(invaild_mem(reg[4] + i)){
						printf("Memory address out of range: 0x%08x\n", reg[4] + i);
						return 1;
					}
				}
				else if(reg[2] == 10){
					printf("EXIT syscall\n");
					return 1;
			}
				else {
					printf("Invaild syscall\n");
					return 1;
				}
			}
			break;
		case 38:
			if(read) {
				printf("xor $%d, $%d, $%d",d_(temp),s_(temp), t_(temp));
			}
			else {
				reg[d_(temp)] =  (reg[s_(temp)] ^ reg[t_(temp)]);
			}
			break;
			
		default:
			printf("unknown instruction\n");
			return 1;
		}
		return 0;
}

/*
받은 4byte integer의 
opcode 부분을 확인한다.
*/ 
int divide_byte(int temp,int read){
	PC = PC + 4;
	int checker = 0;
	switch((temp & opcode) >> 26){
		case 0:
			return op_code_0(temp, read);
			break;
		case 8:
			if(read) {
				printf("addi $%d, $%d, %hd",t_(temp),s_(temp),i_(temp));
			}
			else {
				reg[t_(temp)] = (int) (reg[s_(temp)] + (short) i_(temp));
			}
			break;
		case 9:
			if(read) {
				printf("addiu $%d, $%d, %hd",t_(temp),s_(temp),i_(temp));
			}
			else {
				
				reg[t_(temp)] = (int)(reg[s_(temp)] + (short) i_(temp)) ;
			}
			break;
		case 12:
			if(read) {
				printf("andi $%d, $%d, %hd",t_(temp),s_(temp),i_(temp));
			}
			else {
				reg[t_(temp)] = reg[s_(temp)] & (unsigned int) i_(temp);
			}
			break;
		case 4:
			if(read) {
				printf("beq $%d, $%d, %d",s_(temp), t_(temp), off_(temp));
			}
			else {
				if(reg[s_(temp)] == reg[t_(temp)]){
					PC = PC +  off_(temp) * 4;
					
					if(invaild_inst(PC)){
						printf("Memory address out of range: 0x%08x\n", PC);
						return 1;
					}
				}	
			}
			break;

		case 5:
			if(read) {
				printf("bne $%d, $%d, %d",s_(temp), t_(temp), off_(temp));
			}
			else {
				if(reg[s_(temp)] != reg[t_(temp)]){
					PC = PC + (off_(temp) << 2);	
					if(invaild_inst(PC)){
						printf("Memory address out of range: 0x%08x\n", PC);
						return 1;
					}
				}
			}
			break;

		case 32:
			if(read) {
				printf("lb $%d, %hd($%d)", t_(temp), temp & offset, s_(temp));
			}
			else {
				data_address = reg[s_(temp)] - 0x10000000 + off_(temp);
				if(invaild_mem(reg[s_(temp)] + off_(temp))){
					printf("Memory address out of range: 0x%08x\n", reg[s_(temp)] + off_(temp));
					return 1;
				}
				char by = 0;
				by += datamem[data_address + i];
				reg[t_(temp)] = by;
			}
			break;

		case 36:
			if(read) {
				printf("lbu $%d, %hd($%d)", t_(temp), temp & offset, s_(temp));
			}
			else {
				int by = 0;
				data_address = reg[s_(temp)] - 0x10000000 + off_(temp);
				if(invaild_mem(reg[s_(temp)] + off_(temp))){
					printf("Memory address out of range: 0x%08x\n", reg[s_(temp)] + off_(temp));
					return 1;
				}
				by = by | datamem[data_address];
				reg[t_(temp)] = by;
			}
			break;
			
		case 33:
			if(read) {
				printf("lh $%d, %hd($%d)", t_(temp), temp & offset, s_(temp));
			}
			else {
				short int by = 0;
				data_address = reg[s_(temp)] - 0x10000000 + off_(temp);
				if(invaild_mem(reg[s_(temp)] + off_(temp))){
					printf("Memory address out of range: 0x%08x\n", reg[s_(temp)] + off_(temp));
					return 1;
				}
				if(data_address % 2 != 0){
					printf("Memory address alignment error: 0x%08x\n", data_address + 0x10000000);
					return 1;
				}
				for(i = 0; i < 2; i++){
					if(invaild_mem(data_address + i + 0x10000000)){
						printf("Memory address out of range: 0x%08x\n", data_address + 0x10000000 + i);
						break;
					}
					by += datamem[data_address + i] << (8 * (1 - i));
				}
				reg[t_(temp)] = by;
			}
			break;
			
		case 37:
			if(read) {
				printf("lhu $%d, %hd($%d)", t_(temp), temp & offset, s_(temp));
			}
			else {
				int by = 0;
				data_address = reg[s_(temp)] - 0x10000000 + off_(temp);
				if(invaild_mem(reg[s_(temp)] + off_(temp))){
					printf("Memory address out of range: 0x%08x\n", reg[s_(temp)] + off_(temp));
					return 1;
				}
				if(data_address % 2 != 0){
					printf("Memory address alignment error: 0x%08x\n",data_address);
					return 1;
				}
				for(i = 0; i < 2; i++){
					if(invaild_mem(data_address + i + 0x10000000)){
						printf("Memory address out of range: 0x%08x\n", data_address + 0x10000000 + i);
						break;
					}
					by = by | datamem[data_address + i] << (8 * (1 - i));
				}
				reg[t_(temp)] = (unsigned int) by;
			}
			break;
			
		case 15:
			if(read) {
				printf("lui $%d, %hd",t_(temp), i_(temp));
			}
			else {
				reg[t_(temp)] = i_(temp) << 16;
			}
			break;
			
		case 35:
			if(read) {
				printf("lw $%d, %hd($%d)", t_(temp), temp & offset, s_(temp));
			}
			else {
				data_address = reg[s_(temp)] - 0x10000000 + off_(temp);
				if(invaild_mem(reg[s_(temp)] + off_(temp))){
					printf("Memory address out of range: 0x%08x\n", reg[s_(temp)] + off_(temp));
					return 1;
				}
				
				if(data_address % 4 != 0){
					printf("Memory address alignment error: 0x%08x\n",data_address);
					return 1;
				}
				int by = 0;
				for(i = 0; i < 4; i++){
					if(invaild_mem(data_address + i + 0x10000000)){
						printf("Memory address out of range: 0x%08x\n", data_address + 0x10000000 + i);
						break;
					}
					by = by | (datamem[data_address + i] << (8 * (3 - i)));
				}
				reg[t_(temp)] = by;
			}
			break;

		case 13:
			if(read) {
				printf("ori $%d, $%d, %hd",t_(temp), s_(temp), i_(temp));
			}
			else {
				reg[t_(temp)] =  reg[s_(temp)] | (unsigned int) i_(temp);
			}
			break; 
			
		case 40:
			if(read) {
				printf("sb $%d, %hd($%d)", t_(temp), temp & offset, s_(temp));
			}
			else {
				int by = 0;
				data_address = reg[s_(temp)] - 0x10000000 + off_(temp);
				if(invaild_mem(reg[s_(temp)] + off_(temp))){
					printf("Memory address out of range: 0x%08x\n", reg[s_(temp)] + off_(temp));
					return 1;
				}
				datamem[data_address] = (0xFF & (reg[t_(temp)]));
			}
			break;


		case 10:
			if(read) {
				printf("slti $%d, $%d, %hd",t_(temp),s_(temp),i_(temp));
			}
			else {
				reg[t_(temp)] = reg[s_(temp)] < (signed int) (short) i_(temp);
			}
			break;
		
		case 11:
			if(read) {
				printf("sltiu $%d, $%d, %hd",t_(temp),s_(temp),i_(temp));
			}
			else {
				reg[t_(temp)] = (unsigned int) reg[s_(temp)] < (unsigned int) (short) i_(temp);
			}
			break;
			
		case 41:
			if(read) {
				printf("sh $%d, %hd($%d)", t_(temp), temp & offset, s_(temp));
			}
			else {
				data_address = reg[s_(temp)] - 0x10000000 + off_(temp);
				if(invaild_mem(reg[s_(temp)] + off_(temp))){
					printf("Memory address out of range: 0x%08x\n", reg[s_(temp)] + off_(temp));
					return 1;
				}
				if(data_address % 2 != 0){
					printf("Memory address alignment error: 0x%08x\n",data_address + 0x10000000);
					return 1;
				}
				for(i = 0; i < 2; i++){
					if(invaild_mem(data_address + i + 0x10000000)){
						printf("Memory address out of range: 0x%08x\n", data_address + 0x10000000 + i);
						break;
					}
					datamem[data_address + i] = (0xFF & (reg[t_(temp)] >> (8 * (1 - i))));
				}
			}
			break;


		case 43:
			if(read) {
				printf("sw $%d, %hd($%d)", t_(temp), temp & offset, s_(temp));
			}
			else {
				data_address = reg[s_(temp)] - 0x10000000 + off_(temp);
				if(invaild_mem(reg[s_(temp)] + off_(temp))){
					printf("Memory address out of range: 0x%08x\n", reg[s_(temp)] + off_(temp));
					return 1;
				}
				if(data_address % 4 != 0){
					printf("Memory address alignment error: 0x%08x\n",data_address + 0x10000000);
					return 1;
				}
				for(i = 0; i < 4; i++){
					if(invaild_mem(data_address + i + 0x10000000)){
						printf("Memory address out of range: 0x%08x\n", data_address + 0x10000000 + i);
						break;
					}
					datamem[data_address + i] = (0xFF & (reg[t_(temp)] >> (8 * (3 - i))));	
				}
			}	
			break;


		case 14:
			if(read) {
				printf("xori $%d, $%d, %hd",t_(temp),s_(temp),i_(temp));
			}
			else {
				reg[t_(temp)] = reg[s_(temp)] ^ (unsigned int) i_(temp);
			}
			break;
			
		case 2:
			if(read) {
				printf("j %d", temp & ~opcode);
			}
			else {
				PC = (PC & 0xF0000000) | ((temp & ~opcode) << 2);
				if(invaild_inst(PC)){
					printf("Memory address out of range: 0x%08x\n", PC);
					return 1;
				}
			}
			break;
			
		case 3:
			if(read) {
				printf("jal %d", temp & ~opcode);
			}
			else {
				reg[31] = PC;
				PC = (PC & 0xF0000000) | ((temp & ~opcode) << 2);
				
				if(invaild_inst(PC)){
					printf("Memory address out of range: 0x%08x\n", PC);
					return 1;
				}
			}
			break;
		default:
			printf("unknown instruction\n");
			return 1;
		}
		
	return 0;
}




void loaddata(char *filename){
	unsigned int temp;
	unsigned int edian;
	FILE * file;
	file = fopen(filename,"rb");
	int i = 0;
	if(file == NULL) {
		printf("File doesn't exist\n");
		return;
	}
	while(!feof(file)) {
		fread(&temp, 1, 1, file);
		if(feof(file))
			break;
		datamem[i] = temp;
		i++;
	}
}

void loadinst(char *filename){
	unsigned int temp;
	unsigned int edian;
	FILE * file;
	file = fopen(filename,"rb");
	int i = 0;
	if(file == NULL) {
		printf("File doesn't exist\n");
		return;
	}
	while(!feof(file)) {
		fread(&temp, 4, 1, file);
		if(feof(file))
			break;
		edian = ((temp & BYTE1) << 24) + ((temp & BYTE2) << 8)+ ((temp & BYTE3) >> 8) + ((temp & BYTE4) >> 24);
		instmem[4 * i] = edian;
		i++;
	}
}

void readdata(char *filename){
	int i = 0;
	loadinst(filename);
	for(;instmem[4 * i] != 0xFFFFFFFF; i++){
		printf("inst %d: ", i);
		printf("%08x ", instmem[4 * i]);
		divide_byte(instmem[4 * i], 1);
		printf("\n");
	}
	printf("\n");
	Instset();
}




void Dataset(){
	int i;
	for(i = 0; i < 0x10000; i ++)
		datamem[i] = 0xFF;
}

void Instset(){
	int i;
	for(i = 0; i < 0x10000; i ++)
		instmem[i] = 0xFFFFFFFF;
}

void Regset(){
	int i;
	for(i = 0; i < 32; i ++)
		reg[i] = 0;
}


/* main 함수 :
mip-sim> command에 대한 명령어들을 실행한다.
 
*/
int main(void){
	int exit = 1;
	char buff[100];
    char* p;
    int i = 0;

	Instset();
	Regset();
	Dataset();


	while(exit){
		printf("mips-sim> ");
		scanf("%[^\n]s", buff);	
	 	p = strtok(buff," ");
	 	// 예외 처리하는 부분  
		if(!strcmp(p,"exit")){
			exit = 0; 
		}
		if(buff[0] == 0x20){
			printf("Space exists before the command\n");
			while (getchar() != '\n');
			continue;
		}
		
		
		if(!strcmp(p,"read")){
			if (strchr(buff + 5, ' ') == NULL)
				readdata(buff + 5);
			else 
				printf("The filename contains space\n");
		}	
		
		else if(!strcmp(p,"registers")){
			for(i = 0; i < 32; i++) 
				printf("$%d: 0x%08x\n", i, reg[i]);
			printf("HI: 0x%08x\n",HI);
			printf("LO: 0x%08x\n",LO);			
			printf("PC: 0x%08x\n",PC);
		}
		
		else if(!strcmp(p,"loadinst")){
			if (strchr(buff + 9, ' ') == NULL){
				PC = 0;
				Instset();
				Regset();
				loadinst(buff + 9);
			}
			else 
				printf("The filename contains space\n");
		}
		
		else if(!strcmp(p,"loaddata")){
			if (strchr(buff + 9, ' ') == NULL){
				Dataset();
				loaddata(buff + 9);
			}
			else 
				printf("The filename contains space\n");
		}
		
		else if(!strcmp(p,"run")){
			int num = atoi(buff + 4);
			PC = 0;
			Regset();
			for(i = 0; i < num; i++){
				if(divide_byte(instmem[PC], 0)){
					i++;
					break;
				}
			}	
			printf("Executed %d instructions\n", i);
			
		}
	while (getchar() != '\n');

	}
	return 0;
}

